# -*- coding: utf-8 -*-
"""Performing Active Contour single segmentation vs Multisegmentation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TVazBXgKMkn3Ggk6zN3ogM41oZmynKd-
"""

import numpy as np
import matplotlib.pyplot as plt
from skimage.color import rgb2gray
from skimage import data
from skimage.filters import gaussian
from skimage.segmentation import active_contour
import cv2
from PIL import Image
from pylab import*

Image = cv2.imread('cccc.jpg',1)
image = cv2.cvtColor(Image,cv2.COLOR_BGR2GRAY)
img=np.array(image,dtype=np.float64)

s = np.linspace(0, 2 * np.pi, 100)
r = 90 + 70 * np.sin(s)
c = 100 + 70 * np.cos(s)
init = np.array([r, c]).T

snake = active_contour(
    gaussian(img, sigma=3, preserve_range=False),
    init,
    alpha=0.000015,
    beta=10,
    gamma=0.001,
)

fig, ax = plt.subplots(figsize=(7, 7))
ax.imshow(img, cmap=plt.cm.gray)
ax.plot(init[:, 1], init[:, 0], '--r', lw=3)
ax.plot(snake[:, 1], snake[:, 0], '-b', lw=3)
ax.set_xticks([]), ax.set_yticks([])
ax.axis([0, img.shape[1], img.shape[0], 0])

plt.show()


img = cv2.imread('cccc.jpg', 1)
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img=np.array(img,dtype=np.float64)


smoothed_image = gaussian(img, sigma=3, preserve_range=False)

s1 = np.linspace(0, 2 * np.pi, 100)

r1 = 100 + 70 * np.sin(s1)
c1 = 100 + 70 * np.cos(s1)
init1 = np.array([r1, c1]).T


s2 = np.linspace(0, 2 * np.pi, 40)

r2 = 90 + 30 * np.sin(s2)
c2 = 240 + 30 * np.cos(s2)
init2 = np.array([r2, c2]).T

snake1 = active_contour(smoothed_image, init1, alpha=0.015, beta=10, gamma=0.001)

snake2 = active_contour(smoothed_image, init2, alpha=0.015, beta=5, gamma=0.001)

fig, ax = plt.subplots(figsize=(7, 7))
ax.imshow(img, cmap=plt.cm.gray)

ax.plot(init1[:, 1], init1[:, 0], '--r', lw=3, label="Initial Contour 1")
ax.plot(snake1[:, 1], snake1[:, 0], '-b', lw=3, label="Final Contour 1")

ax.plot(init2[:, 1], init2[:, 0], '--g', lw=3, label="Initial Contour 2")
ax.plot(snake2[:, 1], snake2[:, 0], '-y', lw=3, label="Final Contour 2")

ax.set_xticks([]), ax.set_yticks([])
ax.axis([0, img.shape[1], img.shape[0], 0])

plt.legend()
plt.show()